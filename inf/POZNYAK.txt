Vlad
ладно, смотри
получаем непрерывный кусок памяти
в нём: 1 байт - сколько всего страниц в памяти одновременно может быть
2 байт - сколько страниц может быть в подкачке
всего: своп = память * 4
потом идет по 2 байта на кадую страницу в памяти
т.е. допустим 5 страниц может быть
тогда память наша занята
1+1+2*5 байт
уже
потом тоде самое для страниц в свопе
т.е. уже 1+1+2*5+2*20
это служенбая инфа для страниц
у каждой страницы есть свой id начиная с 0 заканчивая 255
т.е. это 1 байт служебной инфы страницы
второй байт служебной инфы - расположение страницы
если 0 - страница пустая и негде не находится
если больше 0 - страница в памяти
если меньше 0 страница в подкачке
размер страницы 72 байта - 8 байт служебной + 64 для данных
8 байт - битовая карта - показывает что нахоидтся в блоках
1 байт располагает инфой для 4 слов
т.е. 1 байт указывает на 4 блока
блок - минимальный выделяемый размер памяти
т.е. у нас блок - слова - 2 байта
на один блок в байте через битовое поле выделяется 2 бита
варианты:
00 свободен
01 занят
10 занят и это последний блок
11 занят но это параметры, где находится продолжение
соотвественно когда через битовое поле работаешь это 0 1 -2 -1
понятно пока?
эй?
короче смотри - когда мы выделяем память мы возвращаем не указатель(!) а слово(2 байта)
номер страницы и смещение в словах в странице
допустим мы хотим данные собрать
мы берем номер страницы
т.е. не номер страницы а id
у каждой страницы уникальный номер
Denis
непонятно
вникаю пока
Vlad
смотри - мы берем её id, ищем по id в памяти слово, которое её описывает
т.е. 1 байт этого слова сравниваем
по второму байту смотрим где страница находится - в свопе или в памяти
если в свопе то восстанавливаем её
если в памяти
то собираем по словам инфу
собрали - вернули
а если данные фрагментированы - то по последнему блоку получаем номер страницы где продолжение и повторям алгоритм
и так пока не встретися последний блок данных
соотвественно своп происходит только в 2 случаях - когда есть пустая нулевая страница и нам надо что-нибудь занять
либо когда мы данные собираем и надо страницу вернуть и прочитать
вот как-то та
к
вроде не сложно но мой мозг уже пухнет просто(
особенно из-за того, что надо всё хранить в памяти
Denis
да нет вроде сложно
Vlad
что непоянтно?
Denis
уже понятно то, что было до этого непонятно. просто разобратся надо.
Vlad
ок, разбирайся
Denis
будут вопросы - напишу
Vlad
я постараюсь щас добить все выделения - там 3 случая
могу скинуть что есть щас
#include<stdio.h>
#include<stdlib.h>
#include<locale.h>
#include<io.h>
#include<Windows.h>
#define ENABLE_CUI //Включить графический интерфейс для менеджера
#define FREE 10|BACKGROUND_GREEN
#define POINT 12|BACKGROUND_BLUE|BACKGROUND_INTENSITY
#define LAST 12|BACKGROUND_GREEN
#define BUSY 12|BACKGROUND_RED
#define LOCKED FOREGROUND_BLUE|FOREGROUND_GREEN|FOREGROUND_RED|FOREGROUND_INTENSITY|BACKGROUND_GREEN|BACKGROUND_BLUE|BACKGROUND_RED

struct BIT
{
int d:2;
int c:2;
int b:2;
int a:2;

};
union BIT_MAP
{
BIT bit_map;
BYTE data;
};

void gotoxy(short x,short y) //Функция перемещения курсора консоли
{
COORD coord;
coord.X = x; //Координата х
coord.Y = y; //Координата y
SetConsoleCursorPosition(GetStdHandle( STD_OUTPUT_HANDLE ),coord);
};

BYTE get_free_page(void Виктория Зинченко) //Возвращает номер пустой страницы, <0 если память исчерпана
{
int temp;
int offset;
BYTE quantity = *((BYTE*)memory) + *((BYTE*)memory+1);
for(int i=0;i<quantity;i++) //Проход по всем страницам
{
temp = *((BYTE*)memory+i*2+2+1);
if(temp > 0) //Если была найдена страница в памяти
{
bool empty = true;
offset = 2 + (*((BYTE*)memory))*2 + (*((BYTE*)memory+1))*2 + 72*(temp-1);//Получаем адрес начала страницы
for(int j=0;j<8;j++) //Цикл по проверке на пустоту страницы
{
if( (*((BYTE*)memory+offset+j)) != 0) //Если участок страницы занят
{
empty = false;
break;
}
}
if(empty == false)
continue;
return i; //Возвращаем id страницы
}
}
for(int i=0;i<quantity;i++) //Ищем вообще пустую страницу
{
temp = *((BYTE*)memory+i*2+2+1);
temp=temp;
if(temp == 0)
{
//Тогда 1 страницы из памяти мы swap
//А эту страницу мы проецируем в память
//Такая функция будет change
//В неё передаём id свопающей страницы и id страницы, которую хотим спроецировать
}
}
}

void* init_memory(size_t size)
{
size_t MEMORY_SIZE; //Полный размер кучи в байтах
size_t DATA_SIZE = size; //Размер доступной памяти
BYTE PAGES_IN_MEMORY; //Максимальное количество одновременно находящихся страниц в памяти
BYTE PAGES_IN_SWAP; //Максимальное количество страниц в подкачке

if(DATA_SIZE > 3264) //Если хотят запросить больше максимального размера
size = 3264;

PAGES_IN_MEMORY = size / 64;
if(DATA_SIZE % 64 > 0) //Учитываем, что нельзя выделить память размером меньше 1 страницы
PAGES_IN_MEMORY++;
if(DATA_SIZE % 64 > 0) //Если надо округлить количество байт
DATA_SIZE += 64 - DATA_SIZE % 64;
PAGES_IN_SWAP = PAGES_IN_MEMORY * 4; //В подкачке можно использовать в 4 раза больше чем в памяти

MEMORY_SIZE = 2 + (PAGES_IN_SWAP+PAGES_IN_MEMORY)*2 + PAGES_IN_MEMORY*72;

#ifdef ENABLE_CUI
float percent;
percent = 2 + PAGES_IN_MEMORY*2 + PAGES_IN_SWAP*2 + 0.125 * PAGES_IN_MEMORY + 0.125 * PAGES_IN_SWAP;
percent/= MEMORY_SIZE;
percent*= 100;
printf("Было выделено %d байт для хранения данных в виде %d страниц\n",DATA_SIZE,PAGES_IN_MEMORY);
printf("Для подкачки можно использовать до %d страниц\n",PAGES_IN_SWAP);
printf("Процент служебной памяти: %f %%\n",percent);
#endif

void *temp = (void*)calloc(MEMORY_SIZE,1);
if(!temp) //Если память выделить не удалось
return NULL;
(*((BYTE*)temp)) = PAGES_IN_MEMORY;
(*((BYTE*)temp+1)) = PAGES_IN_SWAP;
BYTE number = 0; //Уникальный номер страницы
BYTE location = 1; //Расположение страницы: x > 0 - страница в памяти, x < 0 - страница в swap, x == 0 - страница отсутствует
number;
//

int offset = 2 + (*((BYTE*)memory))*2 + (*((BYTE*)memory+1))*2 + 72*position;
swap = fopen("swap.dat","a+");
fwrite((BYTE*)memory+offset,72,1,swap);

}

WORD allocate(void Виктория Зинченко,size_t size) //Выделение памяти под объект
{
WORD rezult;
int page;
size_t findSize = size;
//
int temp;
int offset;
BIT_MAP tempMAP;
//
if(size >= 32 && size < 64) //Если данные занимают более половины страницы
{
page = get_free_page(memory);
temp = *((BYTE*)memory+2+page*2+1);
offset = 2 + (*((BYTE*)memory))*2 + (*((BYTE*)memory+1))*2 + 72*( temp - 1 );
for(int i=0;i<8;i++) //Помечаем в карте занятые блоки
{
/*if(findSize ==0) //Запрашиваемая память закончилась
break;*/
tempMAP.data = *((BYTE*)memory+offset+i);
/*if(findSize == 0)
{
*((BYTE*)memory+offset+i) = tempMAP.data;
break;
}*/
if(findSize == 2)
{
tempMAP.bit_map.a = -2;
findSize-=2;
*((BYTE*)memory+offset+i) = tempMAP.data;
break;
}
if(findSize > 2)
tempMAP.bit_map.a = 1;
findSize-=2;
/*if(findSize == 0)
{
*((BYTE*)memory+offset+i) = tempMAP.data;
break;
}*/
if(findSize == 2)
{
tempMAP.bit_map.b = -2;
findSize-=2;
*((BYTE*)memory+offset+i) = tempMAP.data;
break;
}
if(findSize > 2)
tempMAP.bit_map.b = 1;
findSize-=2;
/*if(findSize == 0)
{
*((BYTE*)memory+offset+i) = tempMAP.data;
break;
}*/
if(findSize == 2)
{
tempMAP.bit_map.c = -2;
findSize-=2;
*((BYTE*)memory+offset+i) = tempMAP.data;
break;
}
if(findSize > 2)
tempMAP.bit_map.c = 1;
findSize-=2;
/*if(findSize == 0)
{
*((BYTE*)memory+offset+i) = tempMAP.data;
break;
}*/
if(findSize == 2)
{
tempMAP.bit_map.d = -2;
findSize-=2;
*((BYTE*)memory+offset+i) = tempMAP.data;
break;
}
if(findSize > 2)
tempMAP.bit_map.d = 1;
findSize-=2;
*((BYTE*)memory+offset+i) = tempMAP.data;
}
}
if(size < 32) //Если данные занимают меньше половины страницы
{

}
if(size > 64) //Если данные занимают больше страницы
{

}
return 1;
}

int main(int argc, char *argv[])
{
size_t availableSize; //Требуемый размер в байтах
void Виктория Зинченко; //Указатель на начало выделенной памяти
setlocale(LC_ALL, "Russian");
printf("Введите требуемый размер памяти в байтах: ");
scanf("%d",&availableSize);
memory = init_memory(availableSize);
if(memory == NULL) //Если память не удалось проинициализировать
{
printf("Ошибка инициализации памяти\n");
system("pause");
return 0;
}
system("pause");
system("cls");




//BIT_MAP a;
//a.data = 207;
//printf("%d %d %d %d",a.bit_map.a,a.bit_map.b,a.bit_map.c,a.bit_map.d);



//show_memory(memory);
allocate(memory,50);
allocate(memory,42);
allocate(memory,40);
show_memory(memory);
/*
for(int i=0;i<166;i++)
{
int a = *((BYTE*)memory+i);
printf("\n%d",a);
i++;
a = *((BYTE*)memory+i);
printf(" %d",a);
}
*/
printf("\n");
system("pause");

return 0;
}
там демка работающая безотказно
и выделение 1 есть
щас добью второе
3 фигня
но - я без свопа не смогу их закончить
мне нужно 2 функции свопа
как разберешься пиши - я обхясню какие
именно
а - битовое поле может работать неправильно
проверь на своём компе
в нете написано что порядок может отличаться
короче если у тебя красный квадрат на зеленом фоне будет не последний из красных - значит неправильно
Denis
void Виктория Зинченко; //Указатель на начало выделенной памяти
что за?
Vlad
что?
Denis
посмотри вые
выше*
Vlad
#include<stdio.h>
#include<stdlib.h>
#include<locale.h>
#include<io.h>
#include<Windows.h>
#define ENABLE_CUI //Включить графический интерфейс для менеджера
#define FREE 10|BACKGROUND_GREEN
#define POINT 12|BACKGROUND_BLUE|BACKGROUND_INTENSITY
#define LAST 12|BACKGROUND_GREEN
#define BUSY 12|BACKGROUND_RED
#define LOCKED FOREGROUND_BLUE|FOREGROUND_GREEN|FOREGROUND_RED|FOREGROUND_INTENSITY|BACKGROUND_GREEN|BACKGROUND_BLUE|BACKGROUND_RED

struct BIT
{
int d:2;
int c:2;
int b:2;
int a:2;

};
union BIT_MAP
{
BIT bit_map;
BYTE data;
};

void gotoxy(short x,short y) //Функция перемещения курсора консоли
{
COORD coord;
coord.X = x; //Координата х
coord.Y = y; //Координата y
SetConsoleCursorPosition(GetStdHandle( STD_OUTPUT_HANDLE ),coord);
};

BYTE get_free_page(void Виктория Зинченко) //Возвращает номер пустой страницы, <0 если память исчерпана
{
int temp;
int offset;
BYTE quantity = *((BYTE*)memory) + *((BYTE*)memory+1);
for(int i=0;i<quantity;i++) //Проход по всем страницам
{
temp = *((BYTE*)memory+i*2+2+1);
if(temp > 0) //Если была найдена страница в памяти
{
bool empty = true;
offset = 2 + (*((BYTE*)memory))*2 + (*((BYTE*)memory+1))*2 + 72*(temp-1);//Получаем адрес начала страницы
for(int j=0;j<8;j++) //Цикл по проверке на пустоту страницы
{
if( (*((BYTE*)memory+offset+j)) != 0) //Если участок страницы занят
{
empty = false;
break;
}
}
if(empty == false)
continue;
return i; //Возвращаем id страницы
}
}
for(int i=0;i<quantity;i++) //Ищем вообще пустую страницу
{
temp = *((BYTE*)memory+i*2+2+1);
temp=temp;
if(temp == 0)
{
//Тогда 1 страницы из памяти мы swap
//А эту страницу мы проецируем в память
//Такая функция будет change
//В неё передаём id свопающей страницы и id страницы, которую хотим спроецировать
}
}
}

void* init_memory(size_t size)
{
size_t MEMORY_SIZE; //Полный размер кучи в байтах
size_t DATA_SIZE = size; //Размер доступной памяти
BYTE PAGES_IN_MEMORY; //Максимальное количество одновременно находящихся страниц в памяти
BYTE PAGES_IN_SWAP; //Максимальное количество страниц в подкачке

if(DATA_SIZE > 3264) //Если хотят запросить больше максимального размера
size = 3264;

PAGES_IN_MEMORY = size / 64;
if(DATA_SIZE % 64 > 0) //Учитываем, что нельзя выделить память размером меньше 1 страницы
PAGES_IN_MEMORY++;
if(DATA_SIZE % 64 > 0) //Если надо округлить количество байт
DATA_SIZE += 64 - DATA_SIZE % 64;
PAGES_IN_SWAP = PAGES_IN_MEMORY * 4; //В подкачке можно использовать в 4 раза больше чем в памяти

MEMORY_SIZE = 2 + (PAGES_IN_SWAP+PAGES_IN_MEMORY)*2 + PAGES_IN_MEMORY*72;

#ifdef ENABLE_CUI
float percent;
percent = 2 + PAGES_IN_MEMORY*2 + PAGES_IN_SWAP*2 + 0.125 * PAGES_IN_MEMORY + 0.125 * PAGES_IN_SWAP;
percent/= MEMORY_SIZE;
percent*= 100;
printf("Было выделено %d байт для хранения данных в виде %d страниц\n",DATA_SIZE,PAGES_IN_MEMORY);
printf("Для подкачки можно использовать до %d страниц\n",PAGES_IN_SWAP);
printf("Процент служебной памяти: %f %%\n",percent);
#endif

void *temp = (void*)calloc(MEMORY_SIZE,1);
if(!temp) //Если память выделить не удалось
return NULL;
(*((BYTE*)temp)) = PAGES_IN_MEMORY;
(*((BYTE*)temp+1)) = PAGES_IN_SWAP;
BYTE number = 0; //Уникальный номер страницы
BYTE location = 1; //Расположение страницы: x > 0 - страница в памяти, x < 0 - страница в swap, x == 0 - страница отсутствует
вот еще раз держи
не знаю что за хреь это было
Denis
WORD allocate(void Виктория Зинченко,size_t size) //Выделение памяти под объект
:)
Виктория Зинченко
Vlad
сука что это
File index.cpp
Denis
)
ок
Vlad
ну как?
Denis
почему для служебки swap на (*4 раза) оьше памяти?
Vlad
а просто так)
ну на самом деле это завязано из-за того, что страниц не может быть больше чем 256
Vlad
из-за того, что размер id страницы байт
я решил сделать 1 к 4 соотношение
Vlad
ну что?
смотри - мне надо 1 своп
получает номер страницы, которую надо восстановить
ищет ещё по id в файле
выбирает рандомно из памяти страницу
которую пихает в своп
сам на её место пихает искому страницу из свопа
ну и делает соотвествующие пометки в служебной инф
е
о том где какая страница находится
+ ещё один своп
он смотрит есть ли ещё нулевые страницы
если есть
он берет онду страницу проецирует в память
а то, на которую проецировали предварительно пихает в своп
+ ещё онду функцию
для обнуления страниц
она просто по всем страницам проходит
в файле и памяти
и смотрит - если в станице нет ифны никакой
тогда он ещё помечает нулевой и удаляет нафиг из файла
либо удаляет из памяти, а на её место что-нибудь из свопа восстанавливает
в файлах тоже вся инфа хранится блоками по 72 байта
ну и соотвесвенно допусти страница имеет атрибуты 3 -5
значит её id 3 и она находится в свопе на 5 месте
т.е. начинается со смещения от начала файла в 5*72 байт
вот так
соотвествеенно страница например с id 1 4 начинается с учатсва в памяти в 2 + 2*(point+2) + 2*(point+4) + 72*4
point+4 в смысле значение по этому адресу
Denis
если памяти нужно больше, чем 64 байта, то данными нужно забить больше одной страницы, как тогда возвращать выделенную память(номер страницы и смещение)? или, допустим, может ли в одной странице быть фрагментированная память (блоки) для разных участков памяти (разных выделенных объектах)? как в этом случае блоки покаывают, что относятся к выделенной памяти конкретного объекта (они же кодируются только от 00 до 11)?
Vlad
я с этим разберусь
у нас есть номер страници и начала данных
т.е. где находится первый блок
и мы дальше идём по порядку
допустим встретился нам блок с атрибутом 11
значит в нем не инфа, а номер страницы и начало инфы в странице
значит ищем ту страницу и идём дальше
Denis
т.е. свопа вообще нет. мне писать и само создание файла и т.д.?
почему в проге 2 визуалных непрерывных блоков (слева и справа, как панели в файл-менеджерах)
это своп и память отдельно, или что?
свопку нужно двигать при удалении?
как я понимаю там только сами страницы с блоками, так ведь (+ их служебка)?
Denis
Forwarded messages
	
Vlad11.01.13
ну и делает соотвествующие пометки в служебной инф
вот это неясно
Forwarded messages
	
Vlad11.01.13
о том где какая страница находится
где эта инфа находится?
Forwarded messages
	
Vlad11.01.13
он берет онду страницу проецирует в память
	
а то, на которую проецировали предварительно пихает в своп
что значит проецирует?
Походу надо либо вместе садится писать, либо проще одному разбираться
BYTE* search_idSwap(BYTE id)
{
FILE *swap;
BYTE tmpId[2] = {0, 1}; // random, tmpId[1] > 0
if(!(swap = fopen("swap.dat","r+")))
{
printf("Ошибка открытия swap.dat\n");
system("pause");
return NULL;
}
while(1)
{
fread(tmpId,2,1,swap);
fseek(swap,72,SEEK_CUR);
if(feof(swap))
{
fclose(swap);
return NULL; // id not found
}
if(tmpId[0] == id)
{
if(tmpId[1] < 0)
{
BYTE *Page = new BYTE[72];
fread(Page,72,1,swap);
fclose(swap);
return Page;
}
}
}
fclose(swap);
return NULL;
}

BOOL map_SwapRAM(BYTE idSwap, void Виктория Зинченко, BYTE numPage_RAM = 0)
{
FILE *swap;
BYTE tmpId[2] = {0, 1}; // random, tmpId[1] > 0
if(!(swap = fopen("swap.dat","r+")))
{
printf("Ошибка открытия swap.dat\n");
system("pause");
return false;
}
while(1)
{
fread(tmpId,2,1,swap);
fseek(swap,72,SEEK_CUR);
if(feof(swap))
{
fclose(swap);
return false; // id not found
}
if(tmpId[0] == idSwap)
{
if(tmpId[1] < 0)
{
BYTE *Page = new BYTE[72];
fread(Page,72,1,swap); // read swap
fseek(swap,-74,SEEK_CUR);
*((BYTE*)memory+2+numPage_RAM*75) = -13; // RAM make swap (2-nd byte = byte after Id < 0)
fwrite((void*)((BYTE*)memory+2+numPage_RAM*74),74,1,swap); // write RAM to swap
memcpy(((BYTE*)memory+4+numPage_RAM*76),Page,72); // copy swap to RAM
*((BYTE*)memory+2+numPage_RAM*74) = idSwap; // write idSwap to RAM
*((BYTE*)memory+2+numPage_RAM*75) = 13; // swap make RAM (2-nd byte = byte after Id > 0)
fclose(swap);
return true;
}
}
}
fclose(swap);
return false;
}
File 123.cpp
Vlad
у меня опять эта гребаная зинченко)
Denis
)
Denis
swap файл изначально и всегда фиксированного размера, так же как и размер RAM?
или размер файла SWAP соответствует только сумме памяти занятых страниц?
и размер файла динамически уменьшается-увеличивается по мере того, сколько стрниц в свапке?
Denis
правильно делаю?
File 123.cpp
Vlad
давай я завтра утром проверю
Denis
ок, ты сам код не проверяй, ты логику посмотри - что принимает функция, её название и что она возвращает - всё сразу понятно станет. и момент там ещё по поводу дефайнов = макс кол-во страниц в свопе и размер страницы свопа.
Я не понимаю: если страница свопа в 4 раза больше страницы памяти то как тогда мне копировать из памяти в своп (придётся с блоками возится и перераспределять там всё = не шарю как с блоками). поэтому указал дефайном размер страницы свопа такой же как и памяти (74 байт = 2 байт(id, расположение) + 8 байт(карта)+ 64 байт(блоки)). можно будет изменить чуть что рамер страницы свопа + добавить возню с блоками
Denis
вот еще вопрос:
как располагаются страницы (их служебка и блоки)?
см файл <serv_blocks.jpg>
Denis
+ нафига 2-ой байт служебки, который после Id страницы? моно ведь тупо Id обнулять = помечать как свободную страницу, а распроложение и так видно, что в памяти, что в свопе. + BYTE = [0,255] - отрицатеьное не пишется в файл
Denis
хотя это ж можно тупо 3-емя состояниями кодировать (те же 0, 1, 2)
Denis
вот
File 123.cpp
Denis
ответь на все вопросы, позвони мне, задолбал не поднимать :[
Vlad
хотя это ж можно тупо 3-емя состояниями кодировать (те же 0, 1, 2) - можно 3-емя, но всё равно 2 бита использовать на три, так что можно и 4 ввести, по ресурсам все тоже самое будет
Denis
можно использовать этот байт как степень занятости страницы = 0 - свободна вся, 255 = вся занята, ну и промежуточные значения покаывают, сколько там занято-свободно
Vlad
о, ага
только 255 нет у нас
если делать как >0 - память а <0 - своп
то диапазон -128 - +127
Denis
нельзя писать в файл отрицатеьную херню!
оно кодируется всё равно как [0,255]
Vlad
тогда 1-127 - память
128 - 255 - своп
суть таже
128-254
0 - пустая, 255 - забитая
Denis
можно ведь без индикации своп/память
т.е. в свопе и в памяти у тебя всё равно будет находится с минусом,или с плюсом
Vlad
Так вед
Так ведь надо где-то помечяать где страница находится
?
без этого ведь некуда
ошибка в схеме
id 2 раза подряд идет
Denis
должен подряд так?
Vlad
в смысле?
Denis
или опечатка?
Vlad
опечатка
Denis
Id нафига 2 раа идёт подряд
ок
Vlad
короче тут полная таблица для 2 страниц
типо пример
расположение - 0 - пустая страница - нигде не находится
1-128 - в памяти
1-127
вернее
Vlad
128-255 - в свопе
Вернее даже так, исходя из максимального количества - 1 - 51 - память, 51-255 - своп
Denis
очень мало всего страниц получается
Vlad
мало?
8 килобайт
можно сделать не байт а слово на индекс
тогда страниц станет невъебенно больше
суть то не изменится
Denis
да я понял. можно при выделении памяти под объект возвращать айдишник как отрицатеьное число, или положительное в зависимости от расположения страницы (сделать вместо того же возвращаемого дворда тип поболее, чтобы вмещал [-255,255])
у меня id шник соответствует номеру блока
т.е. максимально теоритически можно 255 страниц свопа для BYTE, 65535 для int16 и т.д.
Vlad
ну всего да
но тогда елси делать дофига страниц
ковальчук может сказать а чего у вас страницы маленьике
а не
я думал проблема
вроде нет
Denis
я считал время, как быстрее будет навигация к самому дальнему блоку = поиск по id просто страницы и поиск блока по id с индексацией блока.
Forwarded messages
	
Denis12.01.13
вот еще вопрос:
см файл <serv_blocks.jpg>
медленно оба
Vlad
фиг с быстродействием
лишь бы он не придумал нам ошибочную ситуацию
например выделить память больше чем страниц в памяти
100% попросит
не знаю что ещё - фантазии не хватает
Denis
лучше делать:
2 байта = id+ распоожение для первого блока
2 байта = id+ распоожение для второго блока
2 байта = id+ распоожение для третьего блока
...
72 байт = битовая карта + блоки для первого блока
72 байт = битовая карта + блоки для второго блока
72 байт = битовая карта + блоки для третьего блока
..
я так сделал
Vlad
не надо карту хранить вместе с блоками
Denis
?
Vlad
ну вот ушеш блок в своп
ушел
как мы посмотрим сколько в нем места не вытаскивая его
?
я же тебе про это в универе говорил
Denis
места в блоке?
Vlad
да
Denis
можно посмотреть, скоько места в странице по id
по распооению
это быстрее, чем проходить по битовой карте, по крайней мере я для файа считал
по типу размера битовой карты можно ~ рассчитать ко-во свободных байт в странице и посмотреть, вместит и она в себя то, что ты хочешь записать
Vlad
и как мы это сделаем если у нас все 72 байта в файле
т.е. данные и его карта там
?
Denis
как рассчитаем кол-во свободных байт страницы?
Vlad
проходом по карте
хранить их не вариант всё равно
потому что количество не отражает расположение
допустим у нас свободна половина
а расположены они занят - свободен-занят-свободен и так далее
не запихнём мы туда ничего
в таком случае
т.е. всё равно каждый раз по всей карте надо проходить будет
Denis
это ты уже про алгоритм. тут хотя бы реалиовать просто запись. агоритм потом лучше допиливать сверху простеньких функций.
а чтобы рассчитать свободно скоко сколько нет - да, в любом случае по карте идти
Vlad
так в том и дело - щас спихнуть на алгоритм потом повесимся костыли и велосипеды прикручивать
надо сразу всё продумать
Forwarded messages
	
Denis13.01.13
Forwarded messages
оставим твой вариант который сверху
Denis
блин, он же говно
Vlad
почему?
Denis
второй лучше даже
Vlad
оц
ой
да второй
я перепутал
Denis
ок, перепилю тогда своё
Vlad
количество страниц в байтах оставляем?
ну т.е. 51 и 204?
в таких пропорциях?
ну и тогда расположение страницы: 0 - нулевая(нигде) 1- 51 - память 52-255 - своп
Denis
я вообще сделал
#define SWAP_PAGE_COUNT_TYPE BYTE
#define SWAP_PAGE_MAP_TYPE BYTE
и тд.
т.е. можно тупо прописать там int или double и будет дофига и страниц, и размер блоков и битовая карта подстроится по размеру...
Vlad
ну это понятно, но отлаживать и делать всё равно под 1 размер будем
давай короче так и оставим
Denis
ок
Vlad
а так да, вынести потом все размеры в константы
если время останется
чтобы оно вообще все красиво было
Denis
при выделении памяти под объект давай возвращать айдишник как отрицатеьное число, или положительное в зависимости от расположения страницы (сделать вместо того же возвращаемого дворда тип поболее, чтобы вмещал [-255,255])
у меня id шник соответствует номеру блока
Vlad
стоп - id-шик уникальный
для каждой
без зависимости от расположения
Denis
у тебя id шник вообще нафига?
Vlad
чтобы страницы не путать
есть id-шник
по нему в памяти ищется расположение
соседний байт от этого id
Denis
так можно возвращать не id, а номер страницы и номер блока, где распологается начало данных объекта, а где конец там по аглогитму само рассчитается
и не надо id хранить
Vlad
а потом блок переместился и что?
Vlad
void Виктория Зинченко
void *a
*((BTYE*)a+2) = 3
Denis
мб давай хранить ещё ко-во занятых страниц после масимального кол-ва страниц в памяти/свопе?
тогда проход не нужен по служебке
я её просто храню (т.е. хранил) в свапке в начале - так удобнее
Denis
File 123.cpp
так можно
?
File 123.cpp
последние 2 дефайна для удобства - потом заменим на получение их из памяти (это первые 2 элемента памяти)
Vlad
одна большая проблема - с битовой картой нельзя раотать как с массивом -> нельзя изменят ее размер
Denis
всмысле?
Vlad
ой блин
всё норм
туплю уже
Denis
ок
норм, что дефайнами так?
Vlad
ну вроде да
Denis
они ж в стеке потока - он говори можно, я помню
Denis
смотри что есть: статический класс память, а в нём 2 статических класса (оперативка и свопка).
Все функции ок рабочие, осталось допилить работу с битовой картой и выделение +запись + чтение самого объекта (для которого память выделали) из памяти/своп. + добавить твою фирмовую визуализацию.
структура всего как и договаривались: 2 картинка + в свопке находятся только блоки памяти (без байта расположения, без битовой карты. только блоки, в данном случае по 64 байт штука).
Forwarded messages
	
Denis12.01.13
вот еще вопрос:
см файл <serv_blocks.jpg>
вот что есть:
File C++_test.zip
Denis
ой, т.е. структура самой памяти вот такая, как и договаривались - без Id (порядковый номер бока сам является Id), и только один байт (не считая итовой карты) служебки для страницы = степень занятости: 0 = страница свободна, и дальше по степени занятости до 254 макс значение (нет разделения между страницами, наъходящимися в RAM и страницами, находящимися в swap; то, где находится страница высчитывается по её порядковому номеру с учётом кучи дефайнов и типов, объявленных вначале)
см файл <page.jbg>
Denis
ты задолбал! если мы вместе работаем, то как можно чаще кидаем друг другу то, что уже написали, чтобы было легче писать дальше. Неужели ты нифига не написал? Был в вк так хотя бы моё сообщение прочитал, сейчас окажется, что мы написали ону и ту же херню, а другое у обоих не готово! надо ж, блять, согласовывать, а то ничерта не напишем так. А то согласованности ноль - только карта памяти и алгоритм, и каждый сам по себе пишет прогу.
И это, блять, будет потому что ты нифига телефон не поднимаешь и нифига сообщения не читаешь
Denis
есть функция, которая бы устанавливала конкретные 2 ита итовой карты в указанные значения?
Vlad
что?
Denis
у тебя есть функция, которая бы устанавливала конкретный блок битовой карты в указанное значени (00/01/10/11), принимает там номер страницы и номер блока карты?
Vlad
нет
сделаю
Denis
мб напиши лучше алгоритм сам для выделения конкретного кол-ва байт для объекта (функции поиска свободных страниц и блоков в памяти есть уже - просто на их основе алгоритм сам)
операции с битовой картой я почти дописал
тогда останется только вот этот агоритм сдеать и визуализацию с простым интерфейсом
Vlad
алгоритм как написать - кодом или псевдокодом?
Denis
всмысле псевдокодом?
Vlad
ну в смысле тебе сам алгоритм на словах объяснить или что я не понял?
Denis
File MEM.h
вот там есть функции - там из коментов и названий понятно, что они делают, что вовращают, что принимают. ты, оперируя этими функциями напиши в верхний класс-оболочку class MEM методы, которые к примеру принимают кол-во байт, ищут свободное место (вызывая паралельно функции поучения карты, получения блока и тд.) и возвращают там какой-нибудь тип структуры (содержащей id страницы и id стартовоо блока)
Vlad
понятно
надо будет плюс к этому сделать:
освобождение(просто)
обнуление пустых страниц(просто пустые страницы помечать как пустые)(вообще фигня)
саму запись(фигня)
чтение(сложно)
сделаю - скину
насчет чтения - вопрос что возвращать просто
ведь надо будет все куски собрать
и выделить под них место
и вернуть указатель
т.е. тупо возвращать указатель на выделенныу перед этим паять маллоком?
т.е. тупо куда блоки собирать?
или в самой памяти предусмотреть буфер
?
из которого читать и в который писать
Denis
блин
серьёзный вопрос
Vlad
потому что если буфер в памяти - то он ограничен сильно
Denis
ага
Vlad
т.е. больше страницы например не запишешь потому что хуз прочситашеь
а маллок каждый раз вызывать не знаю как рпокатит или нет
т.е. вот именно на этом мы можем проколоться если сейчас не угадаем
как делать
Denis
тогда тупо пусть собирает весь объект в BYTE* и возвращает его
Vlad
так вопрос про место куда собирать
Denis
он же локальный всё равно - из функции возвратися и всё
Vlad
но для него нужна непрерывная область
та же память какая-то
просто 2 варианта - делать буфер с ограничениями на размер
его можно в конце самом сделать чтоб не париться
Denis
в функции BYTE[] сделать (не маллоком! не каллоком!) и в него собирать
Vlad
с переделкой
Denis
и его же возвращать
буфер да, огранниченный
это будет не ок
Vlad
так сам буфер хранить в памяти?
или
каждый раз когда отдаем
делать новый буфер
?
под который надо будет выделять память
Denis
если ты выделишь BYTE[] в функции (не маллоком! не каллоком!) , то это будет локальная переменная в стеке потока!
Vlad
да?
я просто не наю
т.е. можно просто вернуть массив?
Denis
если ты возвроащаешь из функции этот BYTE[] и кидаешь его в принтф, то это BYTE[] выведется и уничтожится. если ты вернёшь это BYTE[] в переменную какую внушнюю, то этот BYTE[] останется висеть у тебя в стеке потока и можно будет им оперировать
ага
Vlad
ясно-понятно
так и сделаю
Denis
допилил работу с битовой картой (поэлемнетно) + добавил функцию пересчёта и записи (обновления) индикатора занятости [0,254] (один байт служебки) одной страницы.
пересчёт значения индикатора идёт проходом по битовой карте страницы и подсчётом, сколько блоков свободно-занято
File C++_test.zip
Denis
а у тебя что?
Vlad
шас погоди
Vlad
Почему на пустые страницы ead2BitsMapPagebyId
read2BitsMapPagebyId возвращает 1
?
Denis
она возвращает тип TwoBits
Vlad
почему вообще bool
ну
а потом мы его ()
да?
чтобы получить состояние?
for(int i = 0; i < readCountPageRam(); i++) //Цикл по выводу состояния страниц
{
for(int j = 0; j < PAGE_MAP_COUNT; j++)
{
TwoBits status = read2BitsMapPagebyId(i,j);
printf("%d ",status.operator bool());


}
}
вот так?
Denis
оператор bool() вернёт 0 только когда была ошибка чтения этого элемента битовой карты. чтобы узнать значение 2-ух этих битов нужно сначала проверить этим оператором bool(), не было ли ошибки при чтении этих 2-ух битов, и если не было, то напрямую обратиться и считать биты: element.first и element.second
Vlad
или нет?
а я сно
ок
Denis
ок
Denis
страницы и блоки битовой карты индексируются с 0. т.е. если блоков(или страниц) всего 32 т, а ты хочешь писать в 32-ую страницу и передаёшь idPage, или idBlock = 32, то выкинет ошибку - нужно указывать id = 31 и такая индексация везде.
хотя это ты и так наверное, догадался
Vlad
я одного боюсь - всё идет статическим классом
следовательно кучу в программе
можно только 1 организовать
а вдруг он скажет - а я 2 хочу
что тогда?
Denis
всмысле несколько раз типо выделить память?
Vlad
в смысле несколько куч одновременно
несколько областей памяти
Denis
убираем статики везде, создаём 2объекта класса MEM
и всё ок
Vlad
ну ладно тогда
if(BYTE > PAGE_DATA_SIZE)
не хочет почему то
Denis
так как бы BYTE - это тип
Vlad
бля
Denis
а PAGE_DATA_SIZE - размер всех блоков данных одной страницы
Vlad
совсем туплю(
Denis
норм
хоть что-то пишешь)
значит ещё не сдох
Vlad
тут?
Denis
да
Vlad
page = MEM::RAM::searchFreePage(2);
page--;
потом
TwoBits status;
status.first = 0;
status.second = 1;
MEM::RAM::write2BitsMapPagebyId(page,i,status);
происходит
outofrange
Что я не так делаю?
Я хочу получить пустую страницу
и разметить её до конца
как занятую
i=0
погоди
Denis
ошибка после записи 2 битов?
write2BitsMapPagebyId
?
Vlad
да первых
другая фигня происходит
смотри
если по шагам идти
твоя функция возвращает 1
т.е. свободна первая страница
за номером 0
я это учитываю
и уменьшаю её
так ведь
см файл <page_pozn.jpg>
Denis
да
Vlad
а потом хз почему она page = 255
это как Виктория Зинченко
Denis
))
Vlad
я вообзе НЕ ПОНИМАЮ?
КАК?
а всё ок
опять туплю
)
невнимательность
Denis
блин, не пугай так)
Vlad
так смотри
я 1 раз выделил
память
как пометить что страница уже не нулевая?
а то оно мне её второй раз предлагает
когда она уже занята
Denis
в битовой карте пометить соответствующие локи как анятые (00-01-10-11) и вызвать updatePageInd - оно пересчитает один байт индикации, наскоько страница заполнена ([0,254])
Vlad
понял
Denis
и запишет этот байт куда нуно
нужно*
Vlad
понял-понял
Vlad
updatePageInd циклится
Denis
в конец вайла добавь mapBlockId++;
забыл
Vlad
где именно?
Denis
while(tmpBits && (mapBlockId < PAGE_MAP_COUNT))
{
tmpBits = read2BitsMapPagebyId(idPage, mapBlockId);
if(!tmpBits.first && !tmpBits.second)
mapfreeBlocks++;
mapBlockId++;
}
вот так
Vlad
ага
Vlad
есть метод посчитать всё свободное место во всех страницах?
Denis
нет
можно по индикатору занятости считать (но будет не совсем точно), или по битовой карте, что точно
Vlad
ну понятно
Denis
просуммировать то, что вернёт updatePageInd для каждой страницы и вот тебе ~ сколько свободно
Vlad
немного не подойдет
помнишь вариант про заянто - свободно
занято- свободно
занято свободно
свободна половина
а с нашей реализациией больше одного слова разместить нельщя
Denis
а, ну а. тогда только по битовой карте идти
Vlad
притом в 2 прохода
один раз ищу
а второй раз запихиваю
Denis
это уже и от алгоритма записи зависит
Vlad
сделай метод - провекра состояния страницы - т.е. прочитать индикатор
т.е. пустая- непустая
или update его возвращает?
Denis
update возвращает кол-во свободных байт+1, или 0, если ошибка.
если update вернёт 1 то значит страница полностью свободна
Vlad
ясно
Denis
ой, если вернёт 1, то вся занята
Vlad
так а если полностью свободна?
Denis
а если вернёт PAGE_DATA_SIZE+1, то вся своодна
Vlad
а как получить количество пустых страниц?
Denis
посчитать, сколько раз update вернёт PAGE_DATA_SIZE+1
спец функции нет
Vlad
т.е. по всем страницам идти и апдейт их?
Denis
да
Denis
можно по байтовому индикатору проверять функцией searchIndPagebyId, но тогда тебе придётся работать с void* напрямую, проще update
быстрее, но возни больше дописывать
Vlad
я придумал как фрагментировать проще в самых худших случаях
короче когда совсем пиздец
то ты тупо с перовй страниц выделяем память как будто нам её хватит в любом случае
а если не хватило
тогда мы просто второй раз с начада проходим
и освобждаем
то что выделели и что не поместилось в итогк
и возвращаем 0
типо не удалсоь
Denis
блин, непонятно ты написал
Vlad
в коде ещё более непонятно напишу)
Denis
при выдеении памяти для объекта ты аполняешь первую найденную свобоную страницу, да?
Vlad
нет
допусти нет у нас свободных страницу
Denis
ну
Vlad
одна шушера осталась
там 5 байт сям 2 айта
и так далее
я все что нашел выделяю
и если этого хватило
значит выделили
а если не хватило
то ты просто освобождаем то что только пытались выделить
Denis
Forwarded messages
	
Vlad14.01.13
то ты просто освобождаем то что только пытались выделить
вот это про каку память?
которую ты локами по 2, 5 и тд. байт нашёл как своодную?
Vlad
допустим у нас в 1 странице свободно 3
во второй 5
в 3 6
нам надо 10
Denis
ну
Vlad
мы идем по порядку
опа 3, потом опа 5, потом опа 6
выделили 3
пошли дальше
выделил 5
ошли дальше
выделили 2
хватило
вернули результат
Вторая ситуация
дано то же
но нам надо 20
идем - нашли 3 - выделили 3
пошли дальше - нашли 5 - выделили пять
пошли дальше - нашли 8 - выделили 8
пришли в конец
нетуболше ничего
значит не удалось
в таком случае
мы возвращаем 0
, но перед этим
освобождаем то
что выделиля только что
Denis
ок
ясно
битовые карты ж помечаешь?
Vlad
да
только их
Denis
а потом, если выдеилась память update вызывай для всех id страниц, в которых распоожены эти блоки.
Vlad
ага
Denis
ок
Vlad
бля
40 минут
убил пока понял
из-за того, что в константах есть арифмитические оерации
то блять нельзя их юзать
если она сама в этих операциях находится
порядок расчета нарушается
Denis
да
нужно объявить предварительно __int64 tmp= <требуемая константа> и оперировать дальше tmp.
__int64 делай, чтобы потом точность не потерять при увеличении дефайнов
Vlad
так
один вопрос
всего страниц сколько это readCountPageRam()+readCountPageSWAP()
да?
Denis
ага
Vlad
значит вот
File MEM.cpp
File index.cpp
File RAM.cpp
File MEM.h
File SWAP.cpp
я на поезд
в 13.30 приеду
Denis
на схемоте будешь?
Vlad
на консультации нет
Denis
ок
давай
Vlad
значит там пару выделений есть
но некоторые ветки пустые
не доделаные
я их успею
но не успею сделать запись/чтение инфы
так что сделай наверно это
Denis
а визуализация есть?
Vlad
да
Denis
не привязывайся к типу - не надо передавать byte, а возвраать именно dword.
Если поменяем тип расмерности страниц на int, или long, то полетит и твой byte и твой dword
вместо dword - структура
struct memUk
{
PAGE_COUNT_TYPE idPage;
PAGE_MAP_TYPE idBlock;
};

вместо byte, передаваемое в allocate - передавай __int64
Denis
и в самих функциях у тебя BYTE size_of_page = PAGE_DATA_SIZE; к примеру. а если у нас PAGE_DATA_SIZE будет 256, или 512, то перепонение и всё говно. поэтому лучше сразу пиши либо тип из дефайна, либо __int64 если тип неизвестен (если число прописанное в дефайнах определяет тип).
Denis
к примеру:
if(size % 2 !=0) //Если требуется память не кратная слову

нужно переписать как:
__int64 tmp = PAGE_DATA_BLOCK_SIZE;
if(size % tmp !=0) //Если требуется память не кратная слову

и т.д.
говно полнейшее, нихрена не готово!
File C++_test.zip
Denis
хотя бы объявления методов кошерные, +посмотри тип, который возвращаем при allocate - думаю там поймёшь.